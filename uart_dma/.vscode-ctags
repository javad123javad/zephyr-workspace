!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!C	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C	m,member	/struct, and union members/
!_TAG_KIND_DESCRIPTION!C	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C	v,variable	/variable definitions/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!C	0.0	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/javad/zephyrproject/zephyr/workspace/uart_dma/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.0.0	//
!_TAG_ROLE_DESCRIPTION!C!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C!macro	undef	/undefined/
BUF_SIZE	src/main.c	/^#define BUF_SIZE /;"	d	file:
PRIORITY	src/main.c	/^#define PRIORITY /;"	d	file:
STACK_SIZE	src/main.c	/^#define STACK_SIZE /;"	d	file:
TIMEOUT	src/main.c	/^#define TIMEOUT /;"	d	file:
UART_DEV_NAME	src/main.c	/^#define UART_DEV_NAME /;"	d	file:
buf	src/main.c	/^    uint8_t buf[BUF_SIZE];$/;"	m	struct:uart_data	typeref:typename:uint8_t[]	file:
current_buf	src/main.c	/^static uint8_t *current_buf = rx_buf1;  \/\/ Start with buffer 1$/;"	v	typeref:typename:uint8_t *	file:
dma_sem	src/main.c	/^struct k_sem dma_sem;$/;"	v	typeref:struct:k_sem
fifo_reserved	src/main.c	/^    void *fifo_reserved;  \/\/ First word reserved for FIFO (used internally by Zephyr)$/;"	m	struct:uart_data	typeref:typename:void *	file:
len	src/main.c	/^    size_t len;$/;"	m	struct:uart_data	typeref:typename:size_t	file:
main	src/main.c	/^int  main(void)$/;"	f	typeref:typename:int
rx_buf1	src/main.c	/^static uint8_t rx_buf1[BUF_SIZE];$/;"	v	typeref:typename:uint8_t[]	file:
rx_buf2	src/main.c	/^static uint8_t rx_buf2[BUF_SIZE];$/;"	v	typeref:typename:uint8_t[]	file:
thread_data	src/main.c	/^static struct k_thread thread_data;$/;"	v	typeref:struct:k_thread	file:
uart_data	src/main.c	/^struct uart_data {$/;"	s	file:
uart_dev	src/main.c	/^static const struct device *uart_dev;$/;"	v	typeref:typename:const struct device *	file:
uart_dma_callback	src/main.c	/^void uart_dma_callback(const struct device *dev, struct uart_event *evt, void *user_data)$/;"	f	typeref:typename:void
uart_process_thread	src/main.c	/^void uart_process_thread(void)$/;"	f	typeref:typename:void
